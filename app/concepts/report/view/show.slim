.row
  .col-lg-12
      .page-header
        h1 = model.title

.row
  .col-lg-12
    .row
      .col-sm-3
        .text-right style="margin-bottom: 20px;"
          = form_tag(update_template_report_path(model.id)) do
            = hidden_field_tag :id, model.id
            = select_tag :content, options_for_select(["default","custom"])
            = submit_tag("Update template")
      .col-sm-3
      .col-sm-3
      .col-sm-3
        .text-right style="margin-bottom: 20px;"
          button id="generate_report" class="btn btn-outline btn-success" Generate Report
    .row
      .panel.panel-default
        .panel.body
          - obj_array.each do |obj|
            .row style="margin-top:40px;"
              = cell (obj[:type]), model, obj: obj

javascript:

  var originalLineDraw = Chart.controllers.line.prototype.draw;
  Chart.helpers.extend(Chart.controllers.line.prototype, {
    draw: function() {
      originalLineDraw.apply(this, arguments);

      var chart = this.chart;
      var ctx = chart.chart.ctx;

      var value = chart.config.data.lineAtValue;
      var colour = chart.config.data.colourAt;
      if (value) {
        var xaxis = chart.scales['x-axis-0'];
        var yaxis = chart.scales['y-axis-1'];

        var at_point = xaxis.getPixelForValue(value);

        ctx.save();
        ctx.beginPath();
        ctx.moveTo(at_point, yaxis.top + 60);
        ctx.strokeStyle = colour;
        ctx.lineTo(at_point, yaxis.bottom);
        ctx.stroke();
        ctx.restore();

        // write AT
        ctx.textAlign = 'center';
        ctx.fillStyle = '#000000';
        ctx.fillText("AT", at_point, yaxis.top + 40);
      }
    }
  });

  function b64toBlob(b64Data, contentType, sliceSize) {
    contentType = contentType || '';
    sliceSize = sliceSize || 512;

    var byteCharacters = atob(b64Data);
    var byteArrays = [];

    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        var slice = byteCharacters.slice(offset, offset + sliceSize);

        var byteNumbers = new Array(slice.length);
        for (var i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }

        var byteArray = new Uint8Array(byteNumbers);

        byteArrays.push(byteArray);
    }

    var blob = new Blob(byteArrays, {type: contentType});
    return blob;
  }

  function getAllElements(){

  }

  function getNodeImage(id){
    var complete_id = 'image-'.concat(id.toString());
    var node = document.getElementById(complete_id);
    var form = new FormData();

    var obj = {form: form, dataUrl: dataURL};

    domtoimage.toPng(node)
      .then(function (obj) {
        var mybase64 = obj[:dataUrl].replace(/^data:image\/\w+;base64,/, "");
        var file = b64toBlob(mybase64, 'image/png');
        // Append our Canvas image file to the form data
        obj[:form].append("image", file);
        obj[:form].append("index", id);
      })
    // And send it
    $.ajax({
       url: "/reports/#{model.id}/generate_image",
       type: "POST",
       data: form,
       processData: false,
       contentType: false,
    });
  }

  function getCanvasImage(id){
    var complete_id = 'canvas-'.concat(id.toString());
    var canvas = document.getElementById(complete_id);
    var image_type = 'image/png'
    var dataURL = canvas.toDataURL(image_type, 1.0);
    var mybase64 = dataURL.replace(/^data:image\/\w+;base64,/, "");

    var file = b64toBlob(mybase64, image_type);
    // Create new form data
    var form = new FormData();
    // Append our Canvas image file to the form data
    form.append("image", file);
    form.append("index", id);
    // And send it
    $.ajax({
       url: "/reports/#{model.id}/generate_image",
       type: "POST",
       data: form,
       processData: false,
       contentType: false,
    });
  }

  function generateImages(item, index){
    if(item == "chart"){
      getCanvasImage(index);
    }else{
      getNodeImage(index);
    };
  }

  function generateAllImages(item, index){
    if(item == "chart"){
      getCanvasImage(index);
    }else{
      getNodeImage(index);
    };
  }

  var array = #{raw js_array.to_json};

  document.getElementById('generate_report').addEventListener('click', function() {

    array.forEach(generateImages);

    // And send it
    // timeout added to make sure that all the images are created (maybe make this smarter in TRB)
    setTimeout(function () {
      $.ajax({
        url: "/reports/#{model.id}/generate_pdf",
        type: "POST",
        processData: false,
        contentType: false,
      });
    }, 2000);
  });
