- if edit?
  = cell ('user/cell/edit_options'), model, obj: obj, size: size
- else
  .col-sm-2
.col-sm-8
  . style="width:100%;"
    canvas id= chart_id style:"-moz-user-select: none; -webkit-user-select: none;-ms-user-select: none;"
  br
.col-sm-2

javascript:
  var color = Chart.helpers.color;

  // get time format
  function getTimeString(time) {
    return moment(time, #{time_format});
  }

  //generate obj to use in the scatter chart
  function getDataSet(xArray, yArray) {
    var array_size = yArray.length - 1;

    if(#{x_time?}){
      for(var i=0;i < array_size; i++) {
        xArray[i] = getTimeString(xArray[i]);
      }
    }

    var data = new Array();
    for(var i=0;i < array_size; i++) {
      var obj = {
                  x: xArray[i],
                  y: yArray[i]
                };
      data.push(obj);
    }
    return data;
  }

  var ctx = document.getElementById('#{chart_id}').getContext("2d");

  // hex string to rgb
  function hexToRgb(hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
  }

  // set time option in case x is a time scale
  function getTimeOptions(time_type){
    var time_options = { unit: 'minute', displayFormats: { 'second': 'mm:ss', 'minute': 'mm:ss'},tooltipFormat: "mm:ss" };

    if(time_type == 'time'){
      return time_options;
    }
  }

  // draw a line to show the VO2max line if required
  function drawVO2max(){
   var vo2_max = {
                      borderColor: #{colour_vo2max},
                      backgroundColor: #{colour_vo2max},
                      fill: false,
                      label: 'VO2 Max',
                      data:[{
                              x: getTimeString(#{vo2_max_starts}),
                              y: #{vo2_max_value}
                            },
                            {
                              x: getTimeString(#{vo2_max_ends}),
                              y: #{vo2_max_value}
                            }
                            ]
                    };
    return vo2_max;

  }

  // draw a line to show the VO2max line if required
  function drawExerPhase(){
    var exer_phase = {
                      backgroundColor: color(hexToRgb(#{colour_exer})).alpha(0.4).rgbString(),
                      label: 'Exercise Phase',
                      pointRadius: 0,
                      data:[{
                              x: getTimeString(#{exer_phase[0]}),
                              y: #{y_exer_phase}
                            },
                            {
                              x: getTimeString(#{exer_phase[1]}),
                              y: #{y_exer_phase}
                            }
                            ]
                    };
    return exer_phase;
  }

  // draw the line for the AT if required
  function drawAT(bool){
   var at_line = getTimeString(#{at_value});

    if (bool){
      return at_line;
    }else{
      return 0;
    }
  }

  // generate the data array to pass to Chart
  function dataSet(vo2, exer){
    var dataset = new Array();
    if(vo2){
      dataset.push(drawVO2max());
    }
    var test = window.chartColors.blue;

    if(#{generate_param_1}){
      param1 = {
                  xAxisID: "x-axis-0",
                  yAxisID: "y-axis-1",
                  backgroundColor: color(hexToRgb(#{colour_1})).alpha(0.5).rgbString(),
                  borderColor: #{colour_1},
                  fill: false,
                  label: #{label_1},
                  data: getDataSet(#{x}, #{y1})
                };
      dataset.push(param1);
    }

    if(#{generate_param_2}){
      param2 = {
                  xAxisID: "x-axis-0",
                  yAxisID: "y-axis-2",
                  backgroundColor: color(hexToRgb(#{colour_2})).alpha(0.5).rgbString(),
                  borderColor: #{colour_2},
                  fill: false,
                  label: #{label_2},
                  data: getDataSet(#{x}, #{y2})
                };
      dataset.push(param2)
    }

    if(#{generate_param_3}){
      param3 = {
                  xAxisID: "x-axis-0",
                  yAxisID: "y-axis-3",
                  backgroundColor: color(hexToRgb(#{colour_3})).alpha(0.5).rgbString(),
                  borderColor: #{colour_3},
                  fill: false,
                  label: #{label_3},
                  data: getDataSet(#{x}, #{y3})
                };
      dataset.push(param3)
    }

    if(exer){
      dataset.push(drawExerPhase());
    }
    return dataset;
  }

  // get y scale options
  function  getYaxisOptions(){
    scale = new Array();

    if(#{generate_param_1}){
      y1_scale = {
                  type: "linear",
                  display: #{show_scale_1},
                  position: "left",
                  id: "y-axis-1",
                  scaleLabel: {
                                display: true,
                                labelString: #{label_1},
                              },
                  };
      scale.push(y1_scale);
    }


    if(#{generate_param_2}){
      y2_scale = {
                  type: "linear",
                  display: #{show_scale_2},
                  position: "right",
                  id: "y-axis-2",
                  scaleLabel: {
                                display: true,
                                labelString: #{label_2},
                              },
                  gridLines: {
                    drawOnChartArea: false,
                    }
                  };
      scale.push(y2_scale);
    }

    if(#{generate_param_3}){
      y3_scale = {
                  type: "linear",
                  display: #{show_scale_3},
                  position: "right",
                  id: "y-axis-3",
                  scaleLabel: {
                                display: true,
                                labelString: #{label_3}
                              },
                  gridLines: {
                    drawOnChartArea: false,
                    }
                  };
    scale.push(y3_scale);
    }


    return scale;
  }

  // generate x scale options

  function getXscaleOptions(){
    x_options = {
                  type: #{x_type},
                  position: 'bottom',
                  scaleLabel: {
                    display: true,
                    labelString: #{x_label.inspect}
                  },
                };

    if(#{x_time?}){
      x_options["time"] = getTimeOptions(#{x_type});
    }else{
      x_options["ticks"] = {
        beginAtZero: true,
        max: 2500
      }
    }
    console.log(x_options);
    return x_options;
  }

  var config = {
                type: 'line',
                data: {
                    datasets: dataSet(#{show_vo2max},#{show_exer}),
                    lineAtValue: drawAT(#{show_AT}),
                    colourAt: #{at_colour}
                },

                options: {
                  responsive: true,
                  title : {
                    display: true,
                    text: #{title}
                  },


                  scales: {
                      yAxes: getYaxisOptions(),
                      xAxes: [getXscaleOptions()]
                          },

                  legend: {
                    display: true,
                    position: 'top'
                  }
                }
              }

  window.myLine = new Chart(ctx, config);

